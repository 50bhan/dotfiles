[user]

	name = 50bhan
	email = Sobhan.Sharifi.Sadeghi@gmail.com

[github]

	user = 50bhan

[credential]

	helper = store

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	excludesfile = ~/.global-gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

    editor = vim

	filemode = false
	
	autocrlf = input

	pager = less --tabs=4 -RFX

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = green
	changed = red
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	#gpgsign = true

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault
	default = current
	
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[alias]

	st = status

	sts = status -sb

	cm = commit -v

  	wip = !git add -u && git commit -m "WIP"

	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

	lgp = lg -p

	unstage = reset --
	
	undo = reset HEAD~1 --mixed

	discard = checkout -- .
	
	staged = diff --cached

	# Create new branch
	new = !"git checkout -b $2"
	
	# Stash current changes and checkout to target branch
	change = !"git stash && git switch $2"

	# Remove all local branches except master
	bclean = !"git branch | grep -ve " master$" | xargs git branch -D"

	# Update local branch list with all new ones from the remote and remove any that are no longer there
	bupdate= !"git remote update --prune"

	# List all of the commits after current user latest commit
	after = !"git log $1@{1}..$1@{0} "$@""

	# Sync a fork with latest changes on upstream
	sync-fork = !git fetch upstream && git checkout master && git merge upstream/master && git push

	# Squash all git commits into one single commit
	squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-ðŸŽ‰ First commit}\");};f"

	# Show the diff between the latest commit and the current state
	df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	dfi = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Pull in remote changes for the current repository and all its submodules
	pull = git pull --recurse-submodules

	# Show verbose output
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	stashes = stash list